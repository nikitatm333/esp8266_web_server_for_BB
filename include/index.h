#ifndef INDEX_H
#define INDEX_H

const char INDEX_PAGE[] PROGMEM = R"=====( 
<!DOCTYPE HTML>
<html lang="ru">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–ß–¢</title>
    <style>
      body {
        background-color: #cccccc;
        font-family: Arial, Helvetica, sans-serif;
        color: #000088;
        margin: 0;
        padding: 20px;
      }
      .container {
        position: relative;
        max-width: 400px;
        margin: auto;
        padding: 20px;
        padding-bottom: 50px; /* üîß –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –ø–æ–¥ –∏–∫–æ–Ω–∫—É */
        background: white;
        border-radius: 10px;
        box-shadow: 0px 4px 6px rgba(0,0,0,0.1);
      }
      h1 {
        margin: 0;
        font-size: 22px;
        text-align: center;
        margin-bottom: 20px;
      }
      label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
      }
      input[type='number'], input[type='text'], input[type='password'] {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
        margin-bottom: 15px;
      }
      /* –°—Ç–∏–ª—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" */
      input[type='submit'] {
        width: 100%;
        padding: 12px;
        font-size: 16px;
        color: white;
        background-color: #007BFF;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        box-sizing: border-box;
        font-family: inherit;
        font-weight: 400;
        line-height: 1.2;
      }
      input[type='submit']:hover {
        background-color: #0056b3;
      }

      /* –°–¥–µ–ª–∞–µ–º —Å—Å—ã–ª–∫–∏-–∫–Ω–æ–ø–∫–∏ (–ñ—É—Ä–Ω–∞–ª UART, –ì—Ä–∞—Ñ–∏–∫) –≤–∏–∑—É–∞–ª—å–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å */
      .buttonLink {
        display: block; /* —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–ª–∞ –ø–æ –±–ª–æ—á–Ω–æ–π –º–æ–¥–µ–ª–∏ */
        width: 100%;
        padding: 12px;
        border: none;
        border-radius: 5px;
        background-color: #007BFF;
        color: white;
        text-decoration: none;
        font-size: 16px;
        cursor: pointer;
        box-sizing: border-box;
        text-align: center;
        font-family: inherit; /* —Ç–æ—Ç –∂–µ —à—Ä–∏—Ñ—Ç */
        font-weight: 400;     /* —Ç–æ—Ç –∂–µ –≤–µ—Å */
        line-height: 1.2;     /* —Ç–æ—Ç –∂–µ –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª */
      }
      .buttonLink:hover {
        background-color: #0056b3;
      }

      /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
      .buttonContainer {
        position: relative;
        display: flex;
        justify-content: center;
        margin: 15px 0;
        padding-top: 0;
      }

      /* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—ë—Ä—Ç—á–∏–∫: –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –¥–æ —à–∏—Ä–∏–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
      .buttonGroup {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 8px;
        align-items: stretch;
        max-width: 100%;
      }

      .buttonIcon {
        display: inline-block;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #007BFF;
        color: white;
        text-align: center;
        line-height: 40px;
        font-size: 20px;
        cursor: pointer;
        transition: background-color 0.3s;
        box-sizing: border-box;
        z-index: 10;
      }
      .buttonIcon:hover {
        background-color: #0056b3;
      }

      /* –ò–∫–æ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Äî —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –≤—Å–µ–≥–æ .container */
      .container #settingsIcon {
        position: absolute;
        right: 12px;
        bottom: 12px;
        top: auto;
      }

      .info-block { margin-top:12px; }
      .info-block p { margin: 6px 0; }
      .info-block .label { font-weight:700; display:block; margin-bottom:4px; }
      .info-block .value { font-size:18px; color:#003366; }

      /* ---------- —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –º–æ–¥–∞–ª–∫–∏ –∏ –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ–π ---------- */
      .modal-overlay {
        display: none;
        position: fixed;
        left: 0; top: 0;
        width: 100%; height: 100%;
        background: rgba(0,0,0,0.4);
        z-index: 50;
        align-items: center;
        justify-content: center;
        padding: 16px;
        box-sizing: border-box;
      }

      .modal {
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 6px 18px rgba(0,0,0,0.18);
        max-width: 320px;
        width: 100%;
        padding: 14px;
        box-sizing: border-box;
        color: #003366;
        font-family: inherit;
      }

      /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª–∫–∏ */
      .modal h3 {
        margin: 0 0 8px 0;
        font-size: 16px;
        color: #003366;
      }

      /* –ü–æ–ª—è –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏ ‚Äî –¥–µ–ª–∞–µ–º –ø–æ —Å—Ç–∏–ª—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ input */
      .modal input[type="text"],
      .modal input[type="password"] {
        width: 100%;
        padding: 8px 10px;
        font-size: 15px;
        border: 1px solid #ccc;
        border-radius: 6px;
        box-sizing: border-box;
        margin-bottom: 10px;
      }

      /* Actions ‚Äî –¥–≤–µ –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º, –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ, –Ω–æ –º–µ–Ω—å—à–∏–µ */
      .modal-actions {
        display: flex;
        gap: 8px;
        margin-top: 6px;
      }

      /* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–í—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤–∞—à–∏ .buttonLink / input[type=submit]) */
      .modalButton {
        flex: 1;
        padding: 8px 10px;
        font-size: 14px;
        color: white;
        background-color: #007BFF;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        text-align: center;
        box-sizing: border-box;
        font-family: inherit;
        text-decoration: none;
      }

      /* –í–∞—Ä–∏–∞–Ω—Ç "–≤—Ç–æ—Ä–∏—á–Ω–∞—è" ‚Äî —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω, —Ç—ë–º–Ω—ã–π —Ç–µ–∫—Å—Ç */
      .modalButton.secondary {
        background-color: #e9eef7;
        color: #003366;
      }

      /* hover */
      .modalButton:hover { background-color: #0056b3; }
      .modalButton.secondary:hover { background-color: #d6e0f3; }

      /* –ù–µ–±–æ–ª—å—à–∞—è –∏–∫–æ–Ω–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
      .modal-close {
        position: absolute;
        right: 18px;
        top: 18px;
        font-size: 18px;
        cursor: pointer;
        color: #666;
      }

      /* –£–º–µ–Ω—å—à–∏–º –∫—Ä—É–≥–æ–≤—É—é –∏–∫–æ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏–º –±–æ–ª–µ–µ "–ø–ª–æ—Å–∫–∏–π" –≤–∏–¥) */
      .container #settingsIcon {
        width: 36px;
        height: 36px;
        line-height: 36px;
        font-size: 18px;
        border-radius: 6px; /* <-- –Ω–µ –∫—Ä—É–≥–ª–∞—è, –∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏ */
      }

      /* –Ω–µ–±–æ–ª—å—à–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ (toast) */
      .toast {
        position: fixed;
        left: 50%;
        bottom: 28px;
        transform: translateX(-50%) translateY(12px);
        background: rgba(0,0,0,0.85);
        color: #fff;
        padding: 10px 14px;
        border-radius: 8px;
        font-size: 14px;
        box-shadow: 0 6px 18px rgba(0,0,0,0.25);
        opacity: 0;
        pointer-events: none;
        transition: opacity 260ms ease, transform 260ms ease;
        z-index: 9999;
        max-width: 92%;
        text-align: center;
      }
      .toast.show {
        opacity: 1;
        transform: translateX(-50%) translateY(0);
        pointer-events: auto;
      }

      /* –Ω–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –º–µ—Ç–æ–∫ ‚Äî —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã */
      .field-label {
        display: block;
        font-weight: 600;
        font-size: 13px;
        margin-bottom: 6px;
        color: #003366;
        user-select: none;
        pointer-events: none; /* <-- –¥–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º */
      }
    </style>

    <script>
      let isFetching = false;

      function updateMac() {
        fetch('/get_mac')
          .then(r => r.json())
          .then(j => {
            if (j && j.mac) {
              const el = document.getElementById('macAddr');
              if (el) el.textContent = '(' + j.mac + ')';
            }
          })
          .catch(()=> {
          });
      }

      document.addEventListener('DOMContentLoaded', function() {
        updateAll();
        updateMac();            // <-- –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º MAC –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        setInterval(updateAll, 1000);
      });


      function updateAll() {
        updateSetpoint();
        updateCentralTemp();
      }

      function updateSetpoint() {
        if (isFetching) return;
        isFetching = true;
        fetch('/get_setpoint')
          .then(r => r.json())
          .then(j => {
            if (j && typeof j.setpoint !== 'undefined') {
              let inp = document.getElementById('tempInput');
              if (document.activeElement !== inp) {
                inp.value = parseFloat(j.setpoint).toFixed(1);
              }
            }
            if (j && typeof j.lastCmd !== 'undefined') {
              document.getElementById('lastCmd').innerText = j.lastCmd;
            }
          })
          .catch(()=>{})
          .finally(()=> { isFetching = false; });
      }

      async function updateCentralTemp() {
        try {
          let r = await fetch('/get_temp');
          if (r.ok) {
            let j = await r.json();
            if (j && typeof j.temp !== 'undefined') {
              document.getElementById('currentTemp').innerText = j.temp;
              return;
            }
          }
        } catch(e){}
      }

      function setTemperature(event) {
        event.preventDefault();
        let tempValue = document.getElementById('tempInput').value;
        if (!tempValue) return;
        const formatted = parseFloat(tempValue).toFixed(1);
        const btn = document.getElementById('setBtn');
        fetch('/set_temp', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: 'temp=' + encodeURIComponent(tempValue)
        })
        .then(response => response.text())
        .then(() => {
          document.getElementById('lastCmd').innerText = 'ESP: Sent T=' + formatted;
          // remove focus from button so color returns
          if (btn && typeof btn.blur === 'function') btn.blur();
          // update after stm32 reply
          setTimeout(updateAll, 600);
        });
      }

      document.addEventListener('DOMContentLoaded', function() {
        updateAll();
        setInterval(updateAll, 1000);
      });
    </script>
  </head>
  <body>
    <div class="container">
      <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–ß–¢ <span id="macAddr" style="font-size:14px; color:#003366;">(...) </span></h1>
    
      <form onsubmit="setTemperature(event)">
        <label for="tempInput">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:</label>
        <input type="number" id="tempInput" name="temp" value="%SETPOINT%" step="0.1" min="-20" max="100" required>
        <input type="submit" id="setBtn" value="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å">
      </form>

      <div class="info-block">
        <p><span class="label">–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</span>
           <span class="value" id="currentTemp">%CURRENTTEMP%</span> ¬∞C
        </p>
        <p><span class="label">–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞:</span>
           <span id="lastCmd">%LASTCMD%</span>
        </p>
      </div>

      <div class="buttonContainer">
        <div class="buttonGroup">
          <a href="/log" class="buttonLink">–ñ—É—Ä–Ω–∞–ª UART</a>
          <a href="/graph" class="buttonLink">–ì—Ä–∞—Ñ–∏–∫</a>
        </div>
      </div>

      <!-- –ò–∫–æ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –º–æ–¥–∞–ª–∫—É) -->
      <div id="settingsIcon" class="buttonIcon" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏" onclick="openSettings()">üîß</div>

      <!-- –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ -->
      <div id="settingsModal" class="modal-overlay" onclick="onOverlayClick(event)">
        <div class="modal" role="dialog" aria-modal="true" aria-labelledby="modalTitle" onclick="event.stopPropagation()">
          <div style="position:relative;">
            <span id="modalClose" class="modal-close" onclick="closeSettings()">‚úï</span>
            <h3 id="modalTitle">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞</h3>
          </div>

          <form id="settingsForm" onsubmit="saveSettings(event)" autocomplete="off">
            <!-- –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∑–∞–º–µ–Ω–∏–ª–∏ <label> –Ω–∞ .field-label ‚Äî –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –ù–ï –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã -->
            <span class="field-label" for="cfg_ssid">SSID</span>
            <input type="text" id="cfg_ssid" name="ssid" required>

            <span class="field-label" for="cfg_pass">PASSWORD</span>
            <input type="password" id="cfg_pass" name="pass">

            <div class="modal-actions">
              <button type="submit" class="modalButton" id="saveCfgBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
              <button type="button" class="modalButton secondary" id="cancelCfgBtn" onclick="closeSettings()">–û—Ç–º–µ–Ω–∞</button>
            </div>
          </form>
        </div>
      </div>

      <!-- Toast —ç–ª–µ–º–µ–Ω—Ç (–≤—Å–µ–≥–¥–∞ –≤ DOM, —á—Ç–æ–±—ã showToast –º–æ–≥ –Ω–∞–π—Ç–∏ –µ–≥–æ) -->
      <div id="toast" class="toast" aria-live="polite" aria-atomic="true"></div>

    </div>

    <script>
    /* –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ */
    function openSettings() {
      const overlay = document.getElementById('settingsModal');
      if (!overlay) return;
      overlay.style.display = 'flex';

      fetch('/get_config')
        .then(r => r.json())
        .then(j => {
          document.getElementById('cfg_ssid').value = j.ssid || '';
          document.getElementById('cfg_pass').value = j.pass || '';
        })
        .catch(()=>{});

      // —Ñ–æ–∫—É—Å —Ç–æ–ª—å–∫–æ –Ω–∞ input (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏)
      setTimeout(()=>{ 
        const el = document.getElementById('cfg_ssid');
        if(el) el.focus();
      }, 120);
    }
    function closeSettings() {
      const overlay = document.getElementById('settingsModal');
      if (!overlay) return;
      overlay.style.display = 'none';
    }
    function onOverlayClick(e) {
      if (e.target && e.target.id === 'settingsModal') closeSettings();
    }

    /* Toast: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
       –≠–ª–µ–º–µ–Ω—Ç #toast –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ DOM ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
       –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –µ–≥–æ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π). */
    function showToast(text, ms = 2200) {
      let t = document.getElementById('toast');
      if (!t) {
        t = document.createElement('div');
        t.id = 'toast';
        t.className = 'toast';
        t.setAttribute('aria-live', 'polite');
        t.setAttribute('aria-atomic', 'true');
        document.body.appendChild(t);
      }
      t.textContent = text;
      t.classList.add('show');
      clearTimeout(t._hideTimer);
      t._hideTimer = setTimeout(()=> {
        t.classList.remove('show');
      }, ms);
    }

    /* –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
    function saveSettings(e) {
      e.preventDefault();
      const ssid = document.getElementById('cfg_ssid').value.trim();
      const pass = document.getElementById('cfg_pass').value;

      if (!ssid) {
        showToast('SSID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 1800);
        return;
      }

      const saveBtn = document.getElementById('saveCfgBtn');
      const cancelBtn = document.getElementById('cancelCfgBtn');
      if (saveBtn) saveBtn.disabled = true;
      if (cancelBtn) cancelBtn.disabled = true;

      fetch('/set_config', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: 'ssid=' + encodeURIComponent(ssid) + '&pass=' + encodeURIComponent(pass)
      }).then(r => {
        if (r.ok) {
          // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É—é —Å–µ—Ç—å,
          // –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º reload –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –ø–æ—Ç–µ—Ä—è—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ, —á–µ–º —É–≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
          showToast('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Å–µ—Ç—å ¬´' + ssid + '¬ª –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 4200);

          // –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É (—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª toast)
          closeSettings();

        } else {
          showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É)', 2000);
        }
      }).catch(()=> {
        showToast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', 2000);
      }).finally(()=> {
        if (saveBtn) saveBtn.disabled = false;
        if (cancelBtn) cancelBtn.disabled = false;
      });
    }
    </script>
  </body>
</html>
)=====";

#endif
